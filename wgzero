#! /usr/bin/env bash

PORT=$(shuf -n 1 -i 10000-65535)
TEMPLATEURL="https://raw.githubusercontent.com/finzzz/wgzero/0.3/template"

GRAY="$(tput setaf 8)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
ORANGE="$(tput setaf 3)"
CYAN="$(tput setaf 6)"
NC="$(tput sgr0)"

Run(){
    IsRoot
    CheckPackages "wg iptables curl qrencode jq"
    EnableIPForward

    case "$1" in
    "install")
        # ./wgzero install
        Install ;;
    "import")
        # ./wgzero import wg0.conf
        Print "Unimplemented" "RED" ;;
    "list")
        # ./wgzero list <wg_interface=wg0>
        Print "Unimplemented" "RED" ;;
    "add")
        # ./wgzero add <client_name> <wg_interface=wg0>
        WG_INTERFACE=${3-wg0}
        Add "$2" "$WG_INTERFACE";;
    "del")
        # ./wgzero delete <client_name> <wg_interface=wg0>
        WG_INTERFACE=${3-wg0}
        Edit "delete" "$2" "$WG_INTERFACE" ;;
    "edit")
        # ./wgzero edit server <wg_interface=wg0>
        # ./wgzero edit <client_name> <wg_interface=wg0>
        Print "Unimplemented" "RED" ;;
    "enable")
        # ./wgzero enable <client_name> <wg_interface=wg0>
        WG_INTERFACE=${3-wg0}
        Edit "enable" "$2" "$WG_INTERFACE" ;;
    "disable")
        # ./wgzero disable <client_name> <wg_interface=wg0>
        WG_INTERFACE=${3-wg0}
        Edit "disable" "$2" "$WG_INTERFACE" ;;
    "show") # priority
        # ./wgzero show config <client_name> <wg_interface=wg0>
        # ./wgzero show qr <client_name> <wg_interface=wg0>
        Print "Unimplemented" "RED" ;;
    "postup")
        # ./wgzero postup <wg_interface>
        WG_INTERFACE=${3-wg0}
        INTERFACE=$(ReadConfig Interface "$WG_INTERFACE")
        TYPE=$(ReadConfig Type "$WG_INTERFACE")
        /usr/sbin/iptables -t nat -A POSTROUTING -o "$INTERFACE" -j MASQUERADE
        if [ "$TYPE" == "nat" ]; then
            /usr/sbin/ip6tables -t nat -A POSTROUTING -o "$INTERFACE" -j MASQUERADE
        elif [ "$TYPE" == "fr" ]; then
            /usr/sbin/ip6tables -A FORWARD -i "$WG_INTERFACE" -j ACCEPT
        fi
        ;;
    "postdown")
        # ./wgzero postdown <wg_interface>
        WG_INTERFACE=${3-wg0}
        INTERFACE=$(ReadConfig Interface "$WG_INTERFACE")
        TYPE=$(ReadConfig Type "$WG_INTERFACE")
        /usr/sbin/iptables -t nat -D POSTROUTING -o "$INTERFACE" -j MASQUERADE
        if [ "$TYPE" == "nat" ]; then
            /usr/sbin/ip6tables -t nat -D POSTROUTING -o "$INTERFACE" -j MASQUERADE
        elif [ "$TYPE" == "fr" ]; then
            /usr/sbin/ip6tables -D FORWARD -i "$WG_INTERFACE" -j ACCEPT
        fi
        ;;
    *)
        Print "Unknown command\\n" "red" ;;
    esac
}

### PRECHECKS ###
IsRoot(){
    if [[ ! "$EUID" -eq 0 ]]; then
        Print "Must be run as root\\n" "red" && exit
    fi
}

CheckPackages(){
    for i in $1; do 
        if [[ ! $(command -v "$i") ]]; then
            Print "$i: command not found, please check required packages.\\n" "red" && exit
        fi
    done
}

EnableIPForward(){
    sed -i 's/\#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
    echo 1 > /proc/sys/net/ipv4/ip_forward
    
    # IPv6
    sed -i 's/\#net.ipv6.conf.all.forwarding=1/net.ipv6.conf.all.forwarding=1/' /etc/sysctl.conf
    echo 1 > /proc/sys/net/ipv6/conf/all/forwarding
    
    /usr/sbin/sysctl -p -q
}
###

Print(){
    case "$2" in
    "red")
        echo -en "${RED}$1${NC}";;
    "cyan")
        echo -en "${CYAN}$1${NC}";;
    "orange")
        echo -en "${ORANGE}$1${NC}";;
    "gray")
        echo -en "${GRAY}$1${NC}";;
    *)
        echo -en "${GREEN}$1${NC}";;
    esac
}

ReadInput(){
    read -rp "${ORANGE}$1 [$2]: ${NC}" VAL
    VAL=${VAL:-"$2"}
}

ReadConfig(){
    # ReadConfig section wg0
    grep "$1 = " "/etc/wireguard/$2.conf" | cut -d "=" -f 2- | tr -d " "
}

WriteConfig(){
    # WriteConfig section default_val wg0
    ReadInput "$1" "$2"
    sed -i "s|$1 =.*|$1 = $VAL|g" "/etc/wireguard/$3.conf"
}

GeneratePublicKey(){
    # GeneratePublicKey privatekey
    /usr/bin/wg pubkey <<< "$1"
}

### INSTALL ###
GenerateConfig(){
    # GenerateConfig wg0
    CFG="/etc/wireguard/$1.conf"
    if [ -f "$CFG" ]; then
        ReadInput "Config file $CFG already exists, do you want to overwrite" "y/N"
        if [ "$VAL" == "y" ]; then
            rm "$CFG"
            ip link del "$1" 2>/dev/null
        else
            exit
        fi
    fi
    
    curl -so "$CFG" "$TEMPLATEURL/wg0.conf"
    sed -i "s/WG_INTERFACE/$1/g" "$CFG"
    chmod 600 "$CFG"
}

SetInterface(){
    # SetInterface wg0
    INTERFACES=$(ip -json l | jq -r '.[]|.ifname' | grep -v 'lo\|wg')
    DEFAULT=$(echo "$INTERFACES" | head -1)

    Print "Available interfaces :\\n" "cyan" && echo "$INTERFACES"
    WriteConfig "Interface" "$DEFAULT" "$1"
}

Install(){
    ReadInput "Wireguard Interface Name" "wg0" && WG="$VAL"
    GenerateConfig "$WG"
    SetInterface "$WG"
    WriteConfig "Endpoint" "$(curl -s ip.me)" "$WG"
    WriteConfig "ListenPort" "$PORT" "$WG"
    WriteConfig "Address" "10.10.0.1/24" "$WG"
    WriteConfig "MTU" "1420" "$WG"
    WriteConfig "Client MTU" "unset" "$WG"
    WriteConfig "DNS" "unset" "$WG"
    WriteConfig "KeepAlive" "unset" "$WG"

    # Generate Private Key
    PRIVKEY=$(/usr/bin/wg genkey)
    ReadInput "Specify private key" "none"
    [ "$VAL" != "none" ] && PRIVKEY="$VAL"
    sed -i "s|PrivateKey =.*|PrivateKey = $PRIVKEY|g" "/etc/wireguard/$WG.conf"

    TYPE="v4"
    ReadInput "Enable IPv6" "y/N"
    if [ "$VAL" == "y" ]; then
        TYPE="nat"
        WriteConfig "IPv6 Prefix" "fd00::" "$WG"
        WriteConfig "IPv6 Subnet" "64" "$WG"

        IPv6Prefix=$(ReadConfig 'IPv6 Prefix' "$WG")
        IPv6Subnet=$(ReadConfig 'IPv6 Subnet' "$WG")

        Print "External routing: \\n" "orange"
        Print "[1] NAT\\n" "cyan"
        Print "[2] Full Routing\\n" "cyan"
        ReadInput "Selection" "1"

        if [ "$VAL" == "2" ]; then
            TYPE="fr" 

            ReadInput "Configure ndppd" "y/N"
            if [ "$VAL" == "y" ]; then
                CheckPackages ndppd

                curl -so /etc/ndppd.conf "$TEMPLATEURL/ndppd.conf"
                sed -i -e "s/IFACE/$IPv6Prefix/g" /etc/ndppd.conf
                sed -i -e "s/PREFIX/$IPv6Subnet/g" /etc/ndppd.conf
                systemctl enable ndppd.service
                systemctl restart ndppd.service
            fi
        fi

        SetClientIPv6 "$IPv6Prefix" "$IPv6Subnet"
        sed -i "s|Address =.*|&, $VAL|g" "/etc/wireguard/$WG.conf"
    fi
    
    sed -i "s/Type =.*/TYPE = $TYPE/g" "/etc/wireguard/$WG.conf"

    wg-quick up "$WG" 2>/dev/null
    systemctl enable wg-quick@"$WG"

    Print "Done, make sure $(ReadConfig ListenPort "$WG")/UDP is open\\n" "red"
}
###

PrintIPs() {
    # PrintIPs 10.0.0.0/24
    BASE=${1%/*}
    MASKSIZE=${1#*/}

    [ "$MASKSIZE" -lt 8 ] && { echo "Max range is /8."; exit 1; }

    MASK=$(( 0xFFFFFFFF << (32 - "$MASKSIZE") ))

    IFS=. read -r a b c d <<< "$BASE"

    IP=$(( (b << 16) + (c << 8) + d ))

    IPSTART=$(( IP & MASK ))
    IPEND=$(( (IPSTART | ~MASK ) & 0x7FFFFFFF ))

    seq "$IPSTART" "$IPEND" | while read -r i; do
        LAST=$(( i & 0x00FF ))
        if [ $LAST -ne 0 ] && [ $LAST -ne 255 ]; then
            echo "$a.$(( (i & 0xFF0000) >> 16 )).$(( (i & 0xFF00) >> 8 )).$LAST"
        fi
    done
}

SetClientIPv4(){
    # SetClientIPv4 wg0
    for i in $(PrintIPs "$(ReadConfig Address "$1")"); do
        DEFAULT="$i"
        grep -q "$i" "/etc/wireguard/$1.conf" || break
    done

    ReadInput "Choose client IPv4" "$DEFAULT"
}

SetClientIPv6(){
    # SetClientIPv6 prefix subnet
    VAL="$1$(head -c 2 /dev/random | od -A n -t x2 | tr -d ' ')/$2"
}

Show(){
    # Show config <wg_interface> <client_name>
    # Show qr <wg_interface> <client_name>
    # /usr/bin/qrencode -t ansiutf8 < "$CFG"
    Print "Unimplemented" "RED"
}

List(){
    # client names, IP, last connect/handshake
    Print "Unimplemented" "RED"
}

WritePeerConfig(){
    # WritePeerConfig section value file
    sed -i "s|$1 =.*|$1 = $2|g" "$3"
}

Add(){
    [[ ! "$2" ]] && [[ ! "$3" ]] && exit # must specify client name and wg interface

    if grep -qi "$2" "/etc/wireguard/$3.conf" ; then
        Print "Client already exists\\n" "red" && exit
    fi

    PRIVKEY="$(wg genkey)"
    TMP=$(mktemp)
    curl -so "$TMP" "$TEMPLATEURL/peer.conf"
    WritePeerConfig Alias "$2" "$TMP"
    WritePeerConfig PrivateKey "$PRIVKEY" "$TMP"
    WritePeerConfig PublicKey "$(wg pubkey <<< "$PRIVKEY")" "$TMP"

    SetClientIPv4 "$3" && WritePeerConfig AllowedIPs "$VAL" "$TMP"

    if [ "$(ReadConfig Type "$3")" != "v4" ]; then
        SetClientIPv6 "$IPv6Prefix" "$IPv6Subnet"
        ReadInput "Choose client IPv6" "$VAL"
        sed -i "s/Address =.*/&, $VAL/g" "$TMP"
    fi

    ReadInput "Generate Pre-Shared Key?" "y/N"
    if [ "$VAL" == "y" ]; then
        WritePeerConfig PreSharedKey "$(wg genpsk)" "$TMP"
        sed -i "s|# PreSharedKey|PreSharedKey|g" "$TMP"
    fi

    cat "$TMP" 
    ReadInput "Add the following client?" "Y/n"
    if [ "$VAL" == "n" ]; then
        rm -rf "$TMP" && exit
    fi

    cat "$TMP" >> "/etc/wireguard/$3.conf" && rm -rf "$TMP"
    wg addconf "$3" <(wg-quick strip "$3")
}

Edit(){
    [[ ! "$2" ]] && [[ ! "$3" ]] && exit # must specify client name and wg interface
    if ! grep -qi "Alias = $2" "/etc/wireguard/$3.conf" ; then
        Print "Client doesn't exist\\n" "red" && exit
    fi

    mapfile -t CLIENTS < <(grep -nE '\[Peer\]$|## CLIENT ##' "/etc/wireguard/$3.conf" | cut -d ':' -f 1)
    for (( i=0;i<${#CLIENTS[@]}-1;i+=2 )); do 
        START="${CLIENTS[$i]}"
        END="${CLIENTS[(($i+1))]}"
        CLIENT_BLOCK=$(sed -n "$START,$END p" /etc/wireguard/"$3".conf)

        if grep -qi "$2" <<< "$CLIENT_BLOCK" ; then
            PUBKEY=$(echo "$CLIENT_BLOCK" | grep PublicKey | cut -d '=' -f 2- | tr -d ' ')
            case "$1" in
            "delete")
                echo "$CLIENT_BLOCK"
                ReadInput "Remove the following client?" "Y/n"
                [ "$VAL" == "n" ] && exit
                sed -i "$START,$END d" "/etc/wireguard/$3.conf"
                ;;
            "disable")
                if grep -qi '^# \[Peer\]' <<< "$CLIENT_BLOCK"; then
                    Print "Client already disabled\\n" "red" && exit
                fi

                echo "$CLIENT_BLOCK"
                ReadInput "Disable the following client?" "Y/n"
                [ "$VAL" == "n" ] && exit
                sed -i -e "$START,$END s|^|# |g" "/etc/wireguard/$3.conf"
                ;;
            "enable")
                if grep -qi '^\[Peer\]' <<< "$CLIENT_BLOCK"; then
                    Print "Client already enabled\\n" "red" && exit
                fi

                sed -e "$START,$END s|^# ||g" "/etc/wireguard/$3.conf" | sed -n "$START,$END p"
                ReadInput "Enable the following client?" "Y/n"
                [ "$VAL" == "n" ] && exit
                sed -i -e "$START,$END s|^# ||g" "/etc/wireguard/$3.conf"
                ;;
            esac

            wg set wg0 peer "$PUBKEY" remove
            wg syncconf wg0 <(wg-quick strip wg0)
        fi
    done    
}

Run "$@"