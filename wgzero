#! /usr/bin/env bash

CONFIGFOLDER=".wgzero"
WG0="/etc/wireguard/wg0.conf"
IPv6Prefix="fd00::"

RED=$'\033[1;31m'
GREEN=$'\033[0;32m'
ORANGE=$'\033[0;33m'
CYAN=$'\033[0;36m'
NC=$'\033[0m'

Run(){
    IsRoot
    CheckPackages "wg iptables curl qrencode ipcalc jq"

    case "$1" in
    "install")
        Install
        ;;
    "list")
        List
        ;;
    "add")
        Add "$@"
        ;;
    "del")
        Del "$@"
        ;;
    "qr")
        QR "$2"
        ;;
    *)
        Print "Unknown command\n" "red"
        ;;
    esac
}

Print(){
    case "$2" in
    "red")
        echo -en "${RED}$1${NC}";;
    "cyan")
        echo -en "${CYAN}$1${NC}";;
    "orange")
        echo -en "${ORANGE}$1${NC}";;
    *)
        echo -en "${GREEN}$1${NC}";;
    esac
}

Read(){
    read -rp "${ORANGE}$1 [$2]: ${NC}" VAL
    VAL=${VAL:-"$2"}
}

WriteConfig(){
    Read "$1" "$2"
    echo "$1=$VAL" >> "$CONFIGFOLDER/conf"
}

IsRoot(){
    if [[ ! "$EUID" -eq 0 ]]; then
        Print "Must be run as root\n" "red"
        exit 1
    fi
}

CheckPackages(){
    for i in $1
    do 
        if [[ ! $(command -v "$i") ]]; then
            Print "$i: command not found, please check required packages.\n" "red"
            exit 1
        fi
    done
}

SetInterface(){
    INTERFACES=$(ip -json l | jq -r '.[]|.ifname' | grep -v lo)
    DEFAULT=$(echo "$INTERFACES" | head -1)

    Print "Available interfaces :\n" "cyan"
    echo "$INTERFACES"

    WriteConfig "Interface" "$DEFAULT"
}

GetConf(){
    grep -i "$1" "$CONFIGFOLDER/conf" | cut -d "=" -f 2
}

GeneratePrivateKey(){
    PRIVKEY=$(/usr/bin/wg genkey)
}

GeneratePublicKey(){
    echo "$2" \
    | tee "$1/priv.key" \
    | /usr/bin/wg pubkey > "$1/pub.key"
}

Init(){
    if [ -d "$CONFIGFOLDER" ] || [ -f "$WG0" ]; then
        Read "Config folder .wgzero already exists, do you want to overwrite" "y/N"
        if [ "$VAL" == "y" ]; then
            rm -rf "$CONFIGFOLDER" "$WG0"
            ip link del wg0 2>/dev/null
        else
            exit 1
        fi
    fi

    mkdir "$CONFIGFOLDER"

    # Generate scripts
    cat > "$CONFIGFOLDER/postup.sh" << EOF
#! /usr/bin/env bash

# ipv4
/usr/sbin/iptables -t nat -A POSTROUTING -o IFACE -j MASQUERADE

# ipv6
if [ "\$1" == "NAT" ]
then
    /usr/sbin/ip6tables -t nat -A POSTROUTING -o IFACE -j MASQUERADE
elif [ "\$1" == "FR" ]
then
    /usr/sbin/ip6tables -A FORWARD -i wg0 -j ACCEPT
fi
EOF

    cat > "$CONFIGFOLDER/postdown.sh" << EOF
#! /usr/bin/env bash

# ipv4
/usr/sbin/iptables -t nat -D POSTROUTING -o IFACE -j MASQUERADE

# ipv6
if [ "\$1" == "NAT" ]
then
    /usr/sbin/ip6tables -t nat -D POSTROUTING -o IFACE -j MASQUERADE
elif [ "\$1" == "FR" ]
then
    /usr/sbin/ip6tables -D FORWARD -i wg0 -j ACCEPT
fi
EOF

    chmod +x "$CONFIGFOLDER"/post{up,down}.sh
}

EnableIPForward(){
    sed -i 's/\#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
    echo 1 > /proc/sys/net/ipv4/ip_forward
    
    if grep -q "IPv6Prefix" "$CONFIGFOLDER/conf"; then
        sed -i 's/\#net.ipv6.conf.all.forwarding=1/net.ipv6.conf.all.forwarding=1/' /etc/sysctl.conf
        echo 1 > /proc/sys/net/ipv6/conf/all/forwarding
    fi
    
    /usr/sbin/sysctl -p
}

Install(){
    Print "Initializing\n"
    Init
    
    Print "Writing configs\n"

    SetInterface
    IFACE=$(GetConf interface)
    sed -i "s/IFACE/$IFACE/g" "$CONFIGFOLDER"/post{up,down}.sh

    WriteConfig "Server" "$(curl -s ip.me)"
    WriteConfig "Port" "51820"
    WriteConfig "Subnet" "10.10.0.1/24"

    TYPE="IPv4"
    Read "Enable IPv6" "y/N"
    if [ "$VAL" == "y" ]; then
        TYPE="NAT"

        Print "External routing: \n" "orange"
        Print "[1] NAT\n" "cyan"
        Print "[2] Full Routing\n" "cyan"
        Read "Selection" "1"

        echo "ExternalRouting=$VAL" >> "$CONFIGFOLDER/conf"
        [ "$VAL" == "2" ] && TYPE="FR"

        Read "IPv6 Prefix" "$IPv6Prefix"
        echo "IPv6Prefix=$VAL" >> "$CONFIGFOLDER/conf"
    fi

    Print "Enable IP forward\n"
    EnableIPForward

    Print "Generate server keys\n"
    GeneratePrivateKey

    Read "Specify private key" "none"
    [ "$VAL" != "none" ] && PRIVKEY="$VAL"
    GeneratePublicKey "$CONFIGFOLDER" "$PRIVKEY"

    Print "Generate config file\n"
    IPv4Addr=$(/usr/bin/ipcalc -b "$(GetConf subnet)" | grep -i hostmin | tr -s " " | cut -d " " -f 2)

    cat >"$WG0" <<EOF
[Interface]
Address = $IPv4Addr/24
SaveConfig = false
PrivateKey = $(cat "$CONFIGFOLDER"/priv.key)
ListenPort = $(GetConf port)
PostUp = $(pwd)/$CONFIGFOLDER/postup.sh $TYPE
PostDown = $(pwd)/$CONFIGFOLDER/postdown.sh $TYPE

EOF

    if grep -q "IPv6Prefix" "$CONFIGFOLDER/conf"; then
        4to6 "$IPv4Addr"
        IPv6Addr="$(GetConf IPv6Prefix)$VAL/64"
        sed -i "s#^Address.*#&, $IPv6Addr#g" "$WG0"
    fi

    chmod -v 600 "$WG0"
    
    Print "Enable service\n"
    wg-quick up wg0
    systemctl enable wg-quick@wg0

    Print "Done, make sure $(GetConf port)/UDP is open\n" "red"
}

SetClientIP(){
    PREFIX=$(GetConf subnet | cut -d "." -f 1,2,3)
    MIN=$(/usr/bin/ipcalc -b "$(GetConf subnet)" | grep -i hostmin | cut -d "." -f 4 | tr -d " ")
    MAX=$(/usr/bin/ipcalc -b "$(GetConf subnet)" | grep -i hostmax | cut -d "." -f 4 | tr -d " ")

    for i in $(seq "$MIN" "$MAX")
    do
        DEFAULT="$PREFIX.$i"
        grep -q "$DEFAULT" $WG0 || break
    done

    Read "Choose client IP" "$DEFAULT"
}

4to6(){
    VAL=$(echo "$1" | cut -d "." -f 4 | xargs printf "%x")
}

QR(){
    CFG="$CONFIGFOLDER/$1/conf"
    [ ! -f "$CFG" ] && Print "Client doesn't exist\n" "red" && exit 1

    Print "\n$CFG\n" "red"
    /usr/bin/qrencode -t ansiutf8 < "$CFG"
}

List(){
    PUBKEYS=$(grep -i "publickey" "$WG0" | tr -d " " | cut -d "=" -f 2)
    for i in $PUBKEYS
    do
        CLIENT=$(grep -r "$i" "$CONFIGFOLDER" | cut -d "/" -f 2)
        IP=$(grep -i address "$CONFIGFOLDER/$CLIENT/conf" | tr -d " " | cut -d "=" -f 2)
        Print "$CLIENT $IP $i\n" "orange"
    done
}

Add(){
    NAME="$2"

    [[ ! "$NAME" ]] && exit 1
    [[ -d "$CONFIGFOLDER/$NAME" ]] && Print "Client already exists\n" "red" && exit 1

    mkdir "$CONFIGFOLDER/$NAME"
    GeneratePrivateKey
    GeneratePublicKey "$CONFIGFOLDER/$NAME" "$PRIVKEY"

    SetClientIP # return VAL
    CLIENT_IP="$VAL"

    # appending server config
    TMP=$(mktemp)
    cat >>"$TMP" <<EOF 
# $NAME
[Peer]
PublicKey = $(cat "$CONFIGFOLDER/$NAME/pub.key")
AllowedIPs = $CLIENT_IP/32

EOF

    # generate client config
    cat >"$CONFIGFOLDER/$NAME/conf" <<EOF
[Interface]
Address = $CLIENT_IP/32
PrivateKey = $(cat "$CONFIGFOLDER/$NAME/priv.key")
EOF

    PUBKEY=$(cat "$CONFIGFOLDER/pub.key")
    ENDPOINT="$(GetConf server):$(GetConf port)"

    cat >>"$CONFIGFOLDER/$NAME/conf" <<EOF

[Peer]
PublicKey = $PUBKEY
Endpoint = $ENDPOINT
AllowedIPs = 0.0.0.0/0
EOF

    # handle IPv6
    if grep -q "IPv6Prefix" "$CONFIGFOLDER/conf"; then
        4to6 "$CLIENT_IP"
        IPv6Addr="$(GetConf IPv6Prefix)$VAL"

        sed -i -e "s|^Address.*$|&, $IPv6Addr/64|g" \
        -e "s|^AllowedIPs.*$|&, ::/0|g" \
        "$CONFIGFOLDER/$NAME/conf"

        sed -i "s|^AllowedIPs.*$|&, $IPv6Addr/128|g" "$TMP"
    fi

    # advanced config
    Read "DNS" "none" && [ "$VAL" != "none" ] && echo "DNS = $VAL" >> "$CONFIGFOLDER/$NAME/conf"
    Read "Edit allowed IPs?" "y/N"
    if [ "$VAL" == "y" ]; then
        ALLOWEDIPS=$(grep -i allowedips "$CONFIGFOLDER/$NAME/conf" | tr -d " " | cut -d "=" -f 2)
        Read "Allowed IPs" "$ALLOWEDIPS"
        [ "$VAL" != "$ALLOWEDIPS" ] && sed -i "s|AllowedIPs = .*|AllowedIPs = $VAL|g" "$CONFIGFOLDER/$NAME/conf"
    fi

    # write and apply new config
    cat "$TMP" >> "$WG0" && rm -rf "$TMP"
    wg addconf wg0 <(wg-quick strip wg0)

    # show qr
    QR "$NAME"
}

Del(){
    CFG="$CONFIGFOLDER/$2"
    if [ -d "$CFG" ]
    then
        ENTRY=$(grep -m 1 -n "# $2" "$WG0" | cut -d ":" -f 1)
        sed -ie "$ENTRY,$((ENTRY + 4))d" "$WG0"

        wg set wg0 peer "$(cat "$CFG/pub.key")" remove
        wg addconf wg0 <(wg-quick strip wg0)

        rm -rf "$CFG"
    else
        Print "Client doesn't exist\n" "red"
    fi
}

Run "$@"